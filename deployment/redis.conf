# Redis configuration file example.
#
# Note that in order to read the configuration file, Redis must be
# started with the file path as first argument:
#
# ./redis-server /path/to/redis.conf

# Note on units: when memory size is needed, it is possible to specify
# it in the usual form of 1k 5GB 4M and so forth:
#
# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
#
# units are case insensitive so 1GB 1Gb 1gB are all the same.

################################## INCLUDES ###################################

# Include one or more other config files here.  This is useful if you
# have a standard template that goes to all Redis servers but also need
# to customize a few per-server settings.  Include files can include
# other files, so use this wisely.
#
# Notice option "include" won't be rewritten by command "CONFIG REWRITE"
# from admin or Redis Sentinel. Since Redis always uses the last processed
# line as value of a configuration directive, you'd better put includes
# at the beginning of this file to avoid overwriting config change at runtime.
#
# If instead you are interested in using includes to override configuration
# options, it is better to use include as the last line.
#
# include /path/to/local.conf
# include /path/to/other.conf

################################ 通用配置  #####################################

# 是否以守护进程的形式启动(后台启动).
daemonize no


# 当以守护进程启动时，指定redis.pid文件地址(其内容为redis对应的进程号)
pidfile /var/run/redis/redis-server.pid


# redis启动使用的端口号
port 6379


# TCP listen 缓冲。
# 在每秒高请求的环境中，您需要高缓冲以避免缓慢的客户端连接问题。
# 请注意，Linux内核默认使用/proc/sys/net/core/somaxconn值，
# 因此请确保提高somaxconn和tcp_max_syn_backlog的值以获得所需的效果。
tcp-backlog 511


# 监听的IP地址，可以同时监听一个或多个地址
#
# 例如:
#
# bind 192.168.1.100 10.0.0.1
bind 127.0.0.1


# 指定监听的unix socket的位置，默认不指定
# unixsocket /var/run/redis/redis.sock
# unixsocketperm 700


# 连接超时时间(客户端空闲多长时间，关闭链接。0表示不关闭)
timeout 300


# 保持tcp连接的时间.
#
# 如果非零，则在没有通信的前提下使用SO_KEEPALIVE向客户端发送TCP ACK。有两个原因：
# 1) 检测对端是否已关闭
# 2) 可以保活
# 在Linux上，此项的值（以秒为单位）是用于发送ACK的时间间隔。
# 请注意，要关闭连接，需要两倍的时间。 在其他内核上，周期取决于内核配置。
# 此选项的合理值为60秒。
tcp-keepalive 0


# 日志级别loglevel.
# 日志级别可选值:
# debug   一些提示信息，对开发与测试很有用
# verbose 有很多有用的信息
# notice  选择适当的verbose信息
# warning 只记录重要的而且的严重的信息
loglevel notice


# 指定日志文件名。空字符串用于强制Redis输出日志到标准输出。
# 如果使用标准输出进行日志记录但是是守护进程，则会将日志发送到 /dev/null
logfile /var/log/redis/redis-server.log


# 是否启用系统日志
# syslog-enabled no


# 指定系统日志ID
# syslog-ident redis


# 指定syslog的设备，必须是用户或者在LOCAL0-LOCAL7这八个数中取值.
# syslog-facility local0


# 设置redis的字典(数据库)数目：字典编号是从0开始的.
databases 16

################################ 数据持久化设置  ################################
#
# 将数据库保存在磁盘上:
#
#   save <seconds> <changes>
#
#   根据给定的时间间隔和写入次数将数据保存到磁盘，
#   即在一定时间段内，键值至少发送多少改变才保存数据库到硬盘上
#
#   在下面的示例中，键-值将保存到磁盘:
#   表示在900秒内至少有1个键的值发生改变时才保存到磁盘
#   表示在300秒内至少有10个键的值发生变化时才保存到磁盘
#   表示在60秒内至少有1000个键的值发生变化时才保存到磁盘
#
#   注意：您可以通过注释掉所有“保存”行来完全禁用保存。
#
#   也可以通过添加带有单个空字符串参数的save指令来删除所有先前配置的保存点，
#   如下例所示：
#
#   save ""

save 900 1
save 300 10
save 60 10000


# 默认情况下，如果启用了RDB快照（至少有一个保存点）并且最后一次后台保存失败了，Redis将停止接受写入。
# 这将使用户意识到（以一种困难的方式）数据未正确保存在磁盘上，否则可能没有人会注意到保存失败，有可能会发生灾难。
# 如果后台保存进程重启，Redis也将自动再次允许写入。
# 如果您已设置对Redis服务器和持久性的正确监视，则可能需要禁用此功能，
# 以便即使存在磁盘，权限等问题，Redis也将继续正常工作。
stop-writes-on-bgsave-error yes


# 是否在保存持久化文件时对rdb文件进行压缩, 默认是yes。如果想节省CPU，则设置为no.
rdbcompression yes


# 从RDB的第5版开始，CRC64校验值被放置在文件的末尾。这使得格式更具损坏抗性，
# 但是在保存和加载RDB文件时需要支付性能（大约10％），所以如果追求更高的性能的话，你可以禁用它。
rdbchecksum yes


# 指定持久化文件的文件名
dbfilename dump.rdb


# 指定工作目录。数据库将写入此目录，文件名由'dbfilename'配置项指令。
# 还将在此目录中创建仅附加文件。
# 请注意，您必须在此处指定目录，而不是文件名。
dir /var/lib/redis

################################# redis主从设置 #################################
#
# 主从复制。 使用slaveof使Redis实例成为另一台Redis服务器的副本。
# 关于Redis主从复制的一些概念理解：
# 1) Redis复制是异步的，但是如果主机没有与给定数量的从机建立连接，则可以配置主机停止接收写入。
# 2) 如果链接断连了相对较短的时间，Redis从机能够与主站进行部分重新同步。可以根据需要设置适合的复制积压大小。
# 3) 在从机自动、重新连接到主机之后就会重新同步, 复制是自动的，不需要用户干预。
# slaveof <masterip> <masterport>


# 如果主机设置了密码（使用下面的“requirepass”配置项），从机需要提供密码。
# masterauth <master-password>


# 当从机与主机失去链接，或者当主从复制正在进行时，从机有两种不同的应答：
# 1）如果slave-serve-stale-data设置为 yes（默认值），则slave仍将回复客户端请求，可能是过期数据、或者如果是第一次同步，则返回空。
# 2）如果slave-serve-stale-data设置为 no，则slave将回复 "SYNC with master in progress"错误到所有类型的命令，除了INFO和SLAVEOF。
slave-serve-stale-data yes


# 你可以配置从机是否接受写请求。对从机进行写操作可能对存储一些短暂数据很有用（因为在与主机重新同步后，很容易删除写入从机上的数据），
# 由于配置了从机可写，如果客户端写入从机，也可能会导致其他问题。

# 从Redis 2.6之后默认从机是只读的。

# 注意：只读从机不应该暴露给不受信任的客户端。此项只是一个防止滥用实例的保护层。
# 默认情况下，只读从机会导出所有管理命令，例如CONFIG，DEBUG等。你可以使用“rename-command”来隐藏所有管理或危险的命令，从而提高只读从机的安全性。
slave-read-only yes


# 复制SYNC策略：磁盘或套接字
# --------------------------------------------------
#  警告：目前仅仅是实验性的
# --------------------------------------------------
# 新加入的从机或重新连接的从机因为只能接收差异而导致无法继续复制，需要执行"完全同步"(RDB文件将从主机传输到从机)。传输有两种方式：
# 1）Disk-back：Redis主机创建一个保存数据库到磁盘上RDB文件的新进程。父进程将文件传输到从机。
# 2）Diskless：Redis主机创建一个新进程，新进程直接将RDB文件通过SOCKET传输到从机。
# 使用Disk-back复制模式，在生成RDB文件时，更多的从机可以加入队列，一旦生成RDB文件的子进程结束，就可以开始传输。
# 使用Diskless复制模式，一旦传输开始，新的从机只能等待当前传输结束，然后再开始新的传输。

# 使用Diskless复制模式时，主机会在开始传输之前等待一段可配置的时间（以秒为单位），希望多个从机加入传输，实现传输并行化。
# 对于磁盘速度慢、网络带宽大的情况，Diskless效果更好。
repl-diskless-sync no


# 启用Diskless复制模式时，可以配置主机等待时间，以便让更多的从机通过socket与主机链接，接受同步。
# 因为一旦传输开始，就不可能为新的从机提供服务，新的从机将排队等待下一次RDB传输，因此主机会等待一段时间，以便让更多的从机链接进来。
# 延迟以秒为单位，默认为5秒。 要禁用它，只需将其设置为0秒。
repl-diskless-sync-delay 5


# 从机将以定义的间隔发送PING到主机。可以使用repl_ping_slave_period选项更改此间隔。 默认值为10秒。
# repl-ping-slave-period 10


# 下列情况会认为复制超时：
# 1）从从机角度看，在SYNC期间发送大批量I/O传输.
# 2）从从机角度看，主机超时
# 3）从主机角度看，从机超时
#
# 注意，确保此值大于repl-ping-slave-period指定的值，否则当主机和从机之间的通信频率较低时，会将从机发送的PING误识别为超时。
# repl-timeout 60


# 同步结束后是否禁止从机的socket的TCP_NODELAY
# yes,Redis将使用较少数量的TCP数据包和占用较少的带宽将数据发送到从机。但可能会增加数据到达从机的延迟，如果使用的是默认的Linux内核配置则最多有40毫秒延迟。
# no, Redis将减少数据到达从机的延迟，但将占用更多带宽进行复制。
#
# 默认情况下，Redis已经针对延迟进行了优化，但是在非常高的流量下，或者当主机和从机之间跳转多的话，将此项设置为yes更好。
repl-disable-tcp-nodelay no


# 设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时
# 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，
# 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。
# 这个值越大，salve 可以断开连接的时间就越长。
# repl-backlog-size 1mb

# 在某些时候，master 不再连接 slaves，backlog 将被释放。
# 当master 和slave 断开了。backlog多长时间被释放
# 如果设置为 0 ，意味着绝不释放 backlog 。
#
# repl-backlog-ttl 3600

# 当 master 不能正常工作的时候，Redis Sentinel 会从 slaves 中选出一个新的 master，
# 这个值越小，就越会被优先选中，但如果设为 0，那是意味着这个 slave 不可能被选中。
#
# 默认优先级为 100。
slave-priority 100


# 如果从机的连接数在M秒延迟内少于N个，则主机停止接受写入。延迟以秒为单位，根据从机接收的最后一次ping时间开始计算（通常每秒发送一次）。
# 例如，要求在10秒内至少3个连接主机：

#min-slaves-to-write 3
#min-slaves-max-lag 10

# 将其中一个设置为0将禁用此功能。默认是 min-slaves-to-write设置为0（禁用功能）、min-slaves-max-lag设置为10。

################################## 安全设置 ###################################

# 在处理任何其他命令之前，都要求客户端先发送 AUTH <PASSWORD>命令。这在有不信任的人也可以访问redis-server主机的情况下很有用。
# 警告：你应该使用一个非常强大的密码，因为Redis非常快，外部用户可以以150k/s的速度尝试破解密码。
# requirepass foobared


# 命令重命名
#
# 可以在共享环境中更改危险命令的名称。例如CONFIG命令可以重命名为难猜的名称，以便它仍可用于内部使用，但不适用于一般客户端。
#
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
# 也可以通过将命令重命名为空字符串来禁用命令
# 请注意，更改登录到AOF文件或传输到从站的命令名称可能会导致问题。

################################### LIMITS ####################################

# 设置同时连接的最大客户端的数量。默认值为10000，但是如果Redis服务器无法设置此值，
# 则允许的最大客户端数为当前文件限制减去32（因为Redis内部保留一些）。

# 达到限制后，Redis将关闭所有新的链接并发送“最大客户端数量”错误。
# maxclients 10000

# Don't use more memory than the specified amount of bytes.
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected (see maxmemory-policy).
#
# If Redis can't remove keys according to the policy, or if the policy is
# set to 'noeviction', Redis will start to reply with errors to commands
# that would use more memory, like SET, LPUSH, and so on, and will continue
# to reply to read-only commands like GET.
#
# This option is usually useful when using Redis as an LRU cache, or to set
# a hard memory limit for an instance (using the 'noeviction' policy).
#
# WARNING: If you have slaves attached to an instance with maxmemory on,
# the size of the output buffers needed to feed the slaves are subtracted
# from the used memory count, so that network problems / resyncs will
# not trigger a loop where keys are evicted, and in turn the output
# buffer of slaves is full with DELs of keys evicted triggering the deletion
# of more keys, and so forth until the database is completely emptied.
#
# In short... if you have slaves attached it is suggested that you set a lower
# limit for maxmemory so that there is some free RAM on the system for slave
# output buffers (but this is not needed if the policy is 'noeviction').
#
# maxmemory <bytes>

# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory
# is reached. You can select among five behaviors:
#
# volatile-lru -> remove the key with an expire set using an LRU algorithm
# allkeys-lru -> remove any key according to the LRU algorithm
# volatile-random -> remove a random key with an expire set
# allkeys-random -> remove a random key, any key
# volatile-ttl -> remove the key with the nearest expire time (minor TTL)
# noeviction -> don't expire at all, just return an error on write operations
#
# Note: with any of the above policies, Redis will return an error on write
#       operations, when there are no suitable keys for eviction.
#
#       At the date of writing these commands are: set setnx setex append
#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd
#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby
#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby
#       getset mset msetnx exec sort
#
# The default is:
#
# maxmemory-policy noeviction

# LRU and minimal TTL algorithms are not precise algorithms but approximated
# algorithms (in order to save memory), so you can tune it for speed or
# accuracy. For default Redis will check five keys and pick the one that was
# used less recently, you can change the sample size using the following
# configuration directive.
#
# The default of 5 produces good enough results. 10 Approximates very closely
# true LRU but costs a bit more CPU. 3 is very fast but not very accurate.
#
# maxmemory-samples 5

############################## APPEND ONLY MODE ###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost (depending on
# the configured save points).
#
# The Append Only File is an alternative persistence mode that provides
# much better durability. For instance using the default data fsync policy
# (see later in the config file) Redis can lose just one second of writes in a
# dramatic event like a server power outage, or a single write if something
# wrong with the Redis process itself happens, but the operating system is
# still running correctly.
#
# AOF and RDB persistence can be enabled at the same time without problems.
# If the AOF is enabled on startup Redis will load the AOF, that is the file
# with the better durability guarantees.
#
# Please check http://redis.io/topics/persistence for more information.

appendonly no

# The name of the append only file (default: "appendonly.aof")

appendfilename "appendonly.aof"

# The fsync() call tells the Operating System to actually write data on disk
# instead of waiting for more data in the output buffer. Some OS will really flush
# data on disk, some other OS will just try to do it ASAP.
#
# Redis supports three different modes:
#
# no: don't fsync, just let the OS flush the data when it wants. Faster.
# always: fsync after every write to the append only log. Slow, Safest.
# everysec: fsync only one time every second. Compromise.
#
# The default is "everysec", as that's usually the right compromise between
# speed and data safety. It's up to you to understand if you can relax this to
# "no" that will let the operating system flush the output buffer when
# it wants, for better performances (but if you can live with the idea of
# some data loss consider the default persistence mode that's snapshotting),
# or on the contrary, use "always" that's very slow but a bit safer than
# everysec.
#
# More details please check the following article:
# http://antirez.com/post/redis-persistence-demystified.html
#
# If unsure, use "everysec".

# appendfsync always
appendfsync everysec
# appendfsync no

# When the AOF fsync policy is set to always or everysec, and a background
# saving process (a background save or AOF log background rewriting) is
# performing a lot of I/O against the disk, in some Linux configurations
# Redis may block too long on the fsync() call. Note that there is no fix for
# this currently, as even performing fsync in a different thread will block
# our synchronous write(2) call.
#
# In order to mitigate this problem it's possible to use the following option
# that will prevent fsync() from being called in the main process while a
# BGSAVE or BGREWRITEAOF is in progress.
#
# This means that while another child is saving, the durability of Redis is
# the same as "appendfsync none". In practical terms, this means that it is
# possible to lose up to 30 seconds of log in the worst scenario (with the
# default Linux settings).
#
# If you have latency problems turn this to "yes". Otherwise leave it as
# "no" that is the safest pick from the point of view of durability.

no-appendfsync-on-rewrite no

# Automatic rewrite of the append only file.
# Redis is able to automatically rewrite the log file implicitly calling
# BGREWRITEAOF when the AOF log size grows by the specified percentage.
#
# This is how it works: Redis remembers the size of the AOF file after the
# latest rewrite (if no rewrite has happened since the restart, the size of
# the AOF at startup is used).
#
# This base size is compared to the current size. If the current size is
# bigger than the specified percentage, the rewrite is triggered. Also
# you need to specify a minimal size for the AOF file to be rewritten, this
# is useful to avoid rewriting the AOF file even if the percentage increase
# is reached but it is still pretty small.
#
# Specify a percentage of zero in order to disable the automatic AOF
# rewrite feature.

auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# An AOF file may be found to be truncated at the end during the Redis
# startup process, when the AOF data gets loaded back into memory.
# This may happen when the system where Redis is running
# crashes, especially when an ext4 filesystem is mounted without the
# data=ordered option (however this can't happen when Redis itself
# crashes or aborts but the operating system still works correctly).
#
# Redis can either exit with an error when this happens, or load as much
# data as possible (the default now) and start if the AOF file is found
# to be truncated at the end. The following option controls this behavior.
#
# If aof-load-truncated is set to yes, a truncated AOF file is loaded and
# the Redis server starts emitting a log to inform the user of the event.
# Otherwise if the option is set to no, the server aborts with an error
# and refuses to start. When the option is set to no, the user requires
# to fix the AOF file using the "redis-check-aof" utility before to restart
# the server.
#
# Note that if the AOF file will be found to be corrupted in the middle
# the server will still exit with an error. This option only applies when
# Redis will try to read more data from the AOF file but not enough bytes
# will be found.
aof-load-truncated yes

################################ LUA SCRIPTING  ###############################

# Max execution time of a Lua script in milliseconds.
#
# If the maximum execution time is reached Redis will log that a script is
# still in execution after the maximum allowed time and will start to
# reply to queries with an error.
#
# When a long running script exceeds the maximum execution time only the
# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be
# used to stop a script that did not yet called write commands. The second
# is the only way to shut down the server in the case a write command was
# already issued by the script but the user doesn't want to wait for the natural
# termination of the script.
#
# Set it to 0 or a negative value for unlimited execution without warnings.
lua-time-limit 5000

################################ REDIS CLUSTER  ###############################
#
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however
# in order to mark it as "mature" we need to wait for a non trivial percentage
# of users to deploy it in production.
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# Normal Redis instances can't be part of a Redis Cluster; only nodes that are
# started as cluster nodes can. In order to start a Redis instance as a
# cluster node enable the cluster support uncommenting the following:
#
# cluster-enabled yes

# Every cluster node has a cluster configuration file. This file is not
# intended to be edited by hand. It is created and updated by Redis nodes.
# Every Redis Cluster node requires a different cluster configuration file.
# Make sure that instances running in the same system do not have
# overlapping cluster configuration file names.
#
# cluster-config-file nodes-6379.conf

# Cluster node timeout is the amount of milliseconds a node must be unreachable
# for it to be considered in failure state.
# Most other internal time limits are multiple of the node timeout.
#
# cluster-node-timeout 15000

# A slave of a failing master will avoid to start a failover if its data
# looks too old.
#
# There is no simple way for a slave to actually have a exact measure of
# its "data age", so the following two checks are performed:
#
# 1) If there are multiple slaves able to failover, they exchange messages
#    in order to try to give an advantage to the slave with the best
#    replication offset (more data from the master processed).
#    Slaves will try to get their rank by offset, and apply to the start
#    of the failover a delay proportional to their rank.
#
# 2) Every single slave computes the time of the last interaction with
#    its master. This can be the last ping or command received (if the master
#    is still in the "connected" state), or the time that elapsed since the
#    disconnection with the master (if the replication link is currently down).
#    If the last interaction is too old, the slave will not try to failover
#    at all.
#
# The point "2" can be tuned by user. Specifically a slave will not perform
# the failover if, since the last interaction with the master, the time
# elapsed is greater than:
#
#   (node-timeout * slave-validity-factor) + repl-ping-slave-period
#
# So for example if node-timeout is 30 seconds, and the slave-validity-factor
# is 10, and assuming a default repl-ping-slave-period of 10 seconds, the
# slave will not try to failover if it was not able to talk with the master
# for longer than 310 seconds.
#
# A large slave-validity-factor may allow slaves with too old data to failover
# a master, while a too small value may prevent the cluster from being able to
# elect a slave at all.
#
# For maximum availability, it is possible to set the slave-validity-factor
# to a value of 0, which means, that slaves will always try to failover the
# master regardless of the last time they interacted with the master.
# (However they'll always try to apply a delay proportional to their
# offset rank).
#
# Zero is the only value able to guarantee that when all the partitions heal
# the cluster will always be able to continue.
#
# cluster-slave-validity-factor 10

# Cluster slaves are able to migrate to orphaned masters, that are masters
# that are left without working slaves. This improves the cluster ability
# to resist to failures as otherwise an orphaned master can't be failed over
# in case of failure if it has no working slaves.
#
# Slaves migrate to orphaned masters only if there are still at least a
# given number of other working slaves for their old master. This number
# is the "migration barrier". A migration barrier of 1 means that a slave
# will migrate only if there is at least 1 other working slave for its master
# and so forth. It usually reflects the number of slaves you want for every
# master in your cluster.
#
# Default is 1 (slaves migrate only if their masters remain with at least
# one slave). To disable migration just set it to a very large value.
# A value of 0 can be set but is useful only for debugging and dangerous
# in production.
#
# cluster-migration-barrier 1

# By default Redis Cluster nodes stop accepting queries if they detect there
# is at least an hash slot uncovered (no available node is serving it).
# This way if the cluster is partially down (for example a range of hash slots
# are no longer covered) all the cluster becomes, eventually, unavailable.
# It automatically returns available as soon as all the slots are covered again.
#
# However sometimes you want the subset of the cluster which is working,
# to continue to accept queries for the part of the key space that is still
# covered. In order to do so, just set the cluster-require-full-coverage
# option to no.
#
# cluster-require-full-coverage yes

# In order to setup your cluster make sure to read the documentation
# available at http://redis.io web site.

################################## SLOW LOG ###################################

# The Redis Slow Log is a system to log queries that exceeded a specified
# execution time. The execution time does not include the I/O operations
# like talking with the client, sending the reply and so forth,
# but just the time needed to actually execute the command (this is the only
# stage of command execution where the thread is blocked and can not serve
# other requests in the meantime).
#
# You can configure the slow log with two parameters: one tells Redis
# what is the execution time, in microseconds, to exceed in order for the
# command to get logged, and the other parameter is the length of the
# slow log. When a new command is logged the oldest one is removed from the
# queue of logged commands.

# The following time is expressed in microseconds, so 1000000 is equivalent
# to one second. Note that a negative number disables the slow log, while
# a value of zero forces the logging of every command.
slowlog-log-slower-than 10000

# There is no limit to this length. Just be aware that it will consume memory.
# You can reclaim memory used by the slow log with SLOWLOG RESET.
slowlog-max-len 128

################################ LATENCY MONITOR ##############################

# The Redis latency monitoring subsystem samples different operations
# at runtime in order to collect data related to possible sources of
# latency of a Redis instance.
#
# Via the LATENCY command this information is available to the user that can
# print graphs and obtain reports.
#
# The system only logs operations that were performed in a time equal or
# greater than the amount of milliseconds specified via the
# latency-monitor-threshold configuration directive. When its value is set
# to zero, the latency monitor is turned off.
#
# By default latency monitoring is disabled since it is mostly not needed
# if you don't have latency issues, and collecting data has a performance
# impact, that while very small, can be measured under big load. Latency
# monitoring can easily be enabled at runtime using the command
# "CONFIG SET latency-monitor-threshold <milliseconds>" if needed.
latency-monitor-threshold 0

############################# EVENT NOTIFICATION ##############################

# Redis can notify Pub/Sub clients about events happening in the key space.
# This feature is documented at http://redis.io/topics/notifications
#
# For instance if keyspace events notification is enabled, and a client
# performs a DEL operation on key "foo" stored in the Database 0, two
# messages will be published via Pub/Sub:
#
# PUBLISH __keyspace@0__:foo del
# PUBLISH __keyevent@0__:del foo
#
# It is possible to select the events that Redis will notify among a set
# of classes. Every class is identified by a single character:
#
#  K     Keyspace events, published with __keyspace@<db>__ prefix.
#  E     Keyevent events, published with __keyevent@<db>__ prefix.
#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
#  $     String commands
#  l     List commands
#  s     Set commands
#  h     Hash commands
#  z     Sorted set commands
#  x     Expired events (events generated every time a key expires)
#  e     Evicted events (events generated when a key is evicted for maxmemory)
#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.
#
#  The "notify-keyspace-events" takes as argument a string that is composed
#  of zero or multiple characters. The empty string means that notifications
#  are disabled.
#
#  Example: to enable list and generic events, from the point of view of the
#           event name, use:
#
#  notify-keyspace-events Elg
#
#  Example 2: to get the stream of the expired keys subscribing to channel
#             name __keyevent@0__:expired use:
#
#  notify-keyspace-events Ex
#
#  By default all notifications are disabled because most users don't need
#  this feature and the feature has some overhead. Note that if you don't
#  specify at least one of K or E, no events will be delivered.
notify-keyspace-events ""

############################### ADVANCED CONFIG ###############################

# Hashes are encoded using a memory efficient data structure when they have a
# small number of entries, and the biggest entry does not exceed a given
# threshold. These thresholds can be configured using the following directives.
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# Similarly to hashes, small lists are also encoded in a special way in order
# to save a lot of space. The special representation is only used when
# you are under the following limits:
list-max-ziplist-entries 512
list-max-ziplist-value 64

# Sets have a special encoding in just one case: when a set is composed
# of just strings that happen to be integers in radix 10 in the range
# of 64 bit signed integers.
# The following configuration setting sets the limit in the size of the
# set in order to use this special memory saving encoding.
set-max-intset-entries 512

# Similarly to hashes and lists, sorted sets are also specially encoded in
# order to save a lot of space. This encoding is only used when the length and
# elements of a sorted set are below the following limits:
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog sparse representation bytes limit. The limit includes the
# 16 bytes header. When an HyperLogLog using the sparse representation crosses
# this limit, it is converted into the dense representation.
#
# A value greater than 16000 is totally useless, since at that point the
# dense representation is more memory efficient.
#
# The suggested value is ~ 3000 in order to have the benefits of
# the space efficient encoding without slowing down too much PFADD,
# which is O(N) with the sparse encoding. The value can be raised to
# ~ 10000 when CPU is not a concern, but space is, and the data set is
# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.
hll-sparse-max-bytes 3000

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
# order to help rehashing the main Redis hash table (the one mapping top-level
# keys to values). The hash table implementation Redis uses (see dict.c)
# performs a lazy rehashing: the more operation you run into a hash table
# that is rehashing, the more rehashing "steps" are performed, so if the
# server is idle the rehashing is never complete and some more memory is used
# by the hash table.
#
# The default is to use this millisecond 10 times every second in order to
# actively rehash the main dictionaries, freeing memory when possible.
#
# If unsure:
# use "activerehashing no" if you have hard latency requirements and it is
# not a good thing in your environment that Redis can reply from time to time
# to queries with 2 milliseconds delay.
#
# use "activerehashing yes" if you don't have such hard requirements but
# want to free memory asap when possible.
activerehashing yes

# The client output buffer limits can be used to force disconnection of clients
# that are not reading data from the server fast enough for some reason (a
# common reason is that a Pub/Sub client can't consume messages as fast as the
# publisher can produce them).
#
# The limit can be set differently for the three different classes of clients:
#
# normal -> normal clients including MONITOR clients
# slave  -> slave clients
# pubsub -> clients subscribed to at least one pubsub channel or pattern
#
# The syntax of every client-output-buffer-limit directive is the following:
#
# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>
#
# A client is immediately disconnected once the hard limit is reached, or if
# the soft limit is reached and remains reached for the specified number of
# seconds (continuously).
# So for instance if the hard limit is 32 megabytes and the soft limit is
# 16 megabytes / 10 seconds, the client will get disconnected immediately
# if the size of the output buffers reach 32 megabytes, but will also get
# disconnected if the client reaches 16 megabytes and continuously overcomes
# the limit for 10 seconds.
#
# By default normal clients are not limited because they don't receive data
# without asking (in a push way), but just after a request, so only
# asynchronous clients may create a scenario where data is requested faster
# than it can read.
#
# Instead there is a default limit for pubsub and slave clients, since
# subscribers and slaves receive data in a push fashion.
#
# Both the hard or the soft limit can be disabled by setting them to zero.
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Redis calls an internal function to perform many background tasks, like
# closing connections of clients in timeout, purging expired keys that are
# never requested, and so forth.
#
# Not all tasks are performed with the same frequency, but Redis checks for
# tasks to perform according to the specified "hz" value.
#
# By default "hz" is set to 10. Raising the value will use more CPU when
# Redis is idle, but at the same time will make Redis more responsive when
# there are many keys expiring at the same time, and timeouts may be
# handled with more precision.
#
# The range is between 1 and 500, however a value over 100 is usually not
# a good idea. Most users should use the default of 10 and raise this up to
# 100 only in environments where very low latency is required.
hz 10

# When a child rewrites the AOF file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated. This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes.
aof-rewrite-incremental-fsync yes
